{
  "name": "rpi-ws281x-native",
  "version": "0.4.0",
  "description": "(raspberry-pi *only*) native bindings to control a strip of WS281x-LEDs with node.js",
  "keywords": [
    "raspberry",
    "ws2811",
    "ws2812",
    "led",
    "hardware"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.12.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/raspberry-node/node-rpi-ws281x-native.git"
  },
  "author": {
    "name": "Martin Schuhfuss",
    "email": "m.schuhfuss@gmail.com"
  },
  "homepage": "https://github.com/raspberry-node/node-rpi-ws281x-native",
  "bugs": {
    "url": "https://github.com/raspberry-node/node-rpi-ws281x-native/issues"
  },
  "license": "MIT",
  "dependencies": {
    "nan": "^1.7.0"
  },
  "devDependencies": {},
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "# control ws281x-LEDs with node.js\n\n> if you happen to know C++ and node/iojs/V8, I would really appreciate any help \n> and feedback on this module.\n> There is certainly lots of room for improvement.\n\nThis module provides native bindings to the\n[rpi_ws281x](https://github.com/jgarff/rpi_ws281x) library by Jeremy Garff to\nprovide a very basic set of functions to write data to a strip of\nws2811/ws2812 LEDs. **this will only run on the Raspberry Pi.**\n\n## setup\n\nthis module is available via npm:\n\n    npm install rpi-ws281x-native\n\nif you prefer installing from source:\n\n    npm install -g node-gyp\n    git clone --recursive https://github.com/raspberry-node/node-rpi-ws281x-native.git\n    cd rpi-ws281x-native\n    node-gyp rebuild\n\n\n## usage\n\nthis module mainly exports four functions to send data to the LED-String.\n\n```javascript\nexports = {\n    /**\n     * configures PWM and DMA for sending data to the LEDs.\n     *\n     * @param {Number} numLeds  number of LEDs to be controlled\n     * @param {?Object} options  (acutally only tested with default-values)\n     *                           intialization-options for the library\n     *                           (PWM frequency, DMA channel, GPIO, Brightness)\n     */\n    init: function(numLeds, options) {},\n\n    /**\n     * register a mapping to manipulate array-indices within the\n     * data-array before rendering.\n     *\n     * @param {Array.<Number>} map  the mapping, indexed by destination.\n     */\n    setIndexMapping: function(map) {},\n\n    /**\n     * send data to the LED-strip.\n     *\n     * @param {Uint32Array} data  the pixel-data, 24bit per pixel in\n     *                            RGB-format (0xff0000 is red).\n     */\n    render: function(data) {},\n\n    /**\n     * clears all LEDs, resets the PWM and DMA-parts and deallocates\n     * all internal structures.\n     */\n    reset: function() {}\n};\n```\n\n### Index-Mapping\n\nAs the wiring of the LEDs not neccessarily corresponds to the pixel-ordering in\nthe data-array, this module supports index-remapping. So, if you are building a\ngrid of LEDs you can just use an alternating, top-to-bottom or mirrored wiring\nand use the remapping in order to use a unified structure in the incoming\ndata-arrays.\n\n### Events\n\nIn addition to that, the exported object is an `EventEmitter` that will emit\nthe following Events:\n\n * `beforeRender`: emitted just before the data is prepared and sent to the\n   LED-driver. The handler will receive the pixel-data array (an `Uint32Array`)\n   as single argument. As this event is handled synchronously, you can use this\n   to manipulate the data before it is sent to the LED-Strip.\n * `render`: emitted after the data has been sent to the LED-Strip. The single\n   argument passed to the handler is the final pixel-data array, after\n   index-remapping and gamma-correction.\n\n## testing basic functionality\n\nconnect the WS2812-strip to the raspberry-pi as described\n[here](https://learn.adafruit.com/neopixels-on-raspberry-pi/wiring) and run\nthe command `node examples/rainbow.js <numLeds>`.\nYou should now see some rainbow-colors animation on the LED-strip.\n\n\n## Hardware\n\nThere is a guide [over at adafruit.com](https://learn.adafruit.com/neopixels-on-raspberry-pi)\non how to get the hardware up and running. I followed these instructions by\nthe word and had a working LED-strip.\n\nEssentially, you need the Raspberry Pi, a logic-level converter to shift the\noutput-voltage of the GPIO from 3.3V up to 5V (the guide mentions the 74AHCT125,\nmine is an 74HCT125N which works just as well) and of course a LED-Strip or\nother types of WS2812-LEDs.\n\nTo connect all that together, I'd recommend buying a small breadboard and some\njumper-wires. Also, consider buying a 5V power-supply that can deliver up to\n60mA per LED (so you'll need up to 6A (30W) to fully power 100 LEDs).\nFor smaller applications, a decent USB-charger should do.\n\n### Buying stuff\n\nA short checklist of what you will need:\n\n * Raspberry-PI and SD-Card\n * 5V power-supply (Meanwell for instance builds really good ones)\n * LED-Strip with WS2811/WS2812 Controllers (there are several other\n   controller-variations that are not supported)\n * a breadboard and some jumper-wires (m/m as well as at least two f/m to\n   connect the GPIO-Pins)\n * a 3.3V to 5V logic-level converter (74AHCT125 or 74HCT125N, others will\n   probably also work)\n * more wire to connect the LED-strips\n\nYou can buy everything at [adafruit.com](https://adafruit.com),\n[sparkfun](https://sparkfun.com), on ebay or your favourite electronics\nretailer (germany: check [conrad electronic](http://www.conrad.de)\nor [watterott](http://watterott.com) where i bought most of my stuff).",
  "readmeFilename": "README.md",
  "_id": "rpi-ws281x-native@0.4.0",
  "_from": "rpi-ws281x-native@*"
}
